// Generated by gencpp from file task_plan/traj_out_msgResponse.msg
// DO NOT EDIT!


#ifndef TASK_PLAN_MESSAGE_TRAJ_OUT_MSGRESPONSE_H
#define TASK_PLAN_MESSAGE_TRAJ_OUT_MSGRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace task_plan
{
template <class ContainerAllocator>
struct traj_out_msgResponse_
{
  typedef traj_out_msgResponse_<ContainerAllocator> Type;

  traj_out_msgResponse_()
    : x(0.0)
    , dx(0.0)
    , ddx(0.0)
    , y(0.0)
    , dy(0.0)
    , ddy(0.0)
    , z(0.0)
    , dz(0.0)
    , ddz(0.0)
    , flag_begin(false)  {
    }
  traj_out_msgResponse_(const ContainerAllocator& _alloc)
    : x(0.0)
    , dx(0.0)
    , ddx(0.0)
    , y(0.0)
    , dy(0.0)
    , ddy(0.0)
    , z(0.0)
    , dz(0.0)
    , ddz(0.0)
    , flag_begin(false)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _dx_type;
  _dx_type dx;

   typedef double _ddx_type;
  _ddx_type ddx;

   typedef double _y_type;
  _y_type y;

   typedef double _dy_type;
  _dy_type dy;

   typedef double _ddy_type;
  _ddy_type ddy;

   typedef double _z_type;
  _z_type z;

   typedef double _dz_type;
  _dz_type dz;

   typedef double _ddz_type;
  _ddz_type ddz;

   typedef uint8_t _flag_begin_type;
  _flag_begin_type flag_begin;





  typedef boost::shared_ptr< ::task_plan::traj_out_msgResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::task_plan::traj_out_msgResponse_<ContainerAllocator> const> ConstPtr;

}; // struct traj_out_msgResponse_

typedef ::task_plan::traj_out_msgResponse_<std::allocator<void> > traj_out_msgResponse;

typedef boost::shared_ptr< ::task_plan::traj_out_msgResponse > traj_out_msgResponsePtr;
typedef boost::shared_ptr< ::task_plan::traj_out_msgResponse const> traj_out_msgResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::task_plan::traj_out_msgResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::task_plan::traj_out_msgResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::task_plan::traj_out_msgResponse_<ContainerAllocator1> & lhs, const ::task_plan::traj_out_msgResponse_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.dx == rhs.dx &&
    lhs.ddx == rhs.ddx &&
    lhs.y == rhs.y &&
    lhs.dy == rhs.dy &&
    lhs.ddy == rhs.ddy &&
    lhs.z == rhs.z &&
    lhs.dz == rhs.dz &&
    lhs.ddz == rhs.ddz &&
    lhs.flag_begin == rhs.flag_begin;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::task_plan::traj_out_msgResponse_<ContainerAllocator1> & lhs, const ::task_plan::traj_out_msgResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace task_plan

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::task_plan::traj_out_msgResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::task_plan::traj_out_msgResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task_plan::traj_out_msgResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task_plan::traj_out_msgResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task_plan::traj_out_msgResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task_plan::traj_out_msgResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::task_plan::traj_out_msgResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f97b608cddafab5116084894b452b134";
  }

  static const char* value(const ::task_plan::traj_out_msgResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf97b608cddafab51ULL;
  static const uint64_t static_value2 = 0x16084894b452b134ULL;
};

template<class ContainerAllocator>
struct DataType< ::task_plan::traj_out_msgResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "task_plan/traj_out_msgResponse";
  }

  static const char* value(const ::task_plan::traj_out_msgResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::task_plan::traj_out_msgResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 dx\n"
"float64 ddx\n"
"float64 y\n"
"float64 dy\n"
"float64 ddy\n"
"float64 z\n"
"float64 dz\n"
"float64 ddz\n"
"bool flag_begin\n"
"\n"
;
  }

  static const char* value(const ::task_plan::traj_out_msgResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::task_plan::traj_out_msgResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.dx);
      stream.next(m.ddx);
      stream.next(m.y);
      stream.next(m.dy);
      stream.next(m.ddy);
      stream.next(m.z);
      stream.next(m.dz);
      stream.next(m.ddz);
      stream.next(m.flag_begin);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct traj_out_msgResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::task_plan::traj_out_msgResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::task_plan::traj_out_msgResponse_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "dx: ";
    Printer<double>::stream(s, indent + "  ", v.dx);
    s << indent << "ddx: ";
    Printer<double>::stream(s, indent + "  ", v.ddx);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "dy: ";
    Printer<double>::stream(s, indent + "  ", v.dy);
    s << indent << "ddy: ";
    Printer<double>::stream(s, indent + "  ", v.ddy);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "dz: ";
    Printer<double>::stream(s, indent + "  ", v.dz);
    s << indent << "ddz: ";
    Printer<double>::stream(s, indent + "  ", v.ddz);
    s << indent << "flag_begin: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag_begin);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TASK_PLAN_MESSAGE_TRAJ_OUT_MSGRESPONSE_H
