# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from task_plan/traj_out_msgRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class traj_out_msgRequest(genpy.Message):
  _md5sum = "0a97ae2341ad1b2d6f0203e8c93f2964"
  _type = "task_plan/traj_out_msgRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """time times
"""
  __slots__ = ['times']
  _slot_types = ['time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       times

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(traj_out_msgRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.times is None:
        self.times = genpy.Time()
    else:
      self.times = genpy.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.times.secs, _x.times.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.times is None:
        self.times = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.times.secs, _x.times.nsecs,) = _get_struct_2I().unpack(str[start:end])
      self.times.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.times.secs, _x.times.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.times is None:
        self.times = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.times.secs, _x.times.nsecs,) = _get_struct_2I().unpack(str[start:end])
      self.times.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from task_plan/traj_out_msgResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class traj_out_msgResponse(genpy.Message):
  _md5sum = "f97b608cddafab5116084894b452b134"
  _type = "task_plan/traj_out_msgResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 x
float64 dx
float64 ddx
float64 y
float64 dy
float64 ddy
float64 z
float64 dz
float64 ddz
bool flag_begin

"""
  __slots__ = ['x','dx','ddx','y','dy','ddy','z','dz','ddz','flag_begin']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,dx,ddx,y,dy,ddy,z,dz,ddz,flag_begin

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(traj_out_msgResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.dx is None:
        self.dx = 0.
      if self.ddx is None:
        self.ddx = 0.
      if self.y is None:
        self.y = 0.
      if self.dy is None:
        self.dy = 0.
      if self.ddy is None:
        self.ddy = 0.
      if self.z is None:
        self.z = 0.
      if self.dz is None:
        self.dz = 0.
      if self.ddz is None:
        self.ddz = 0.
      if self.flag_begin is None:
        self.flag_begin = False
    else:
      self.x = 0.
      self.dx = 0.
      self.ddx = 0.
      self.y = 0.
      self.dy = 0.
      self.ddy = 0.
      self.z = 0.
      self.dz = 0.
      self.ddz = 0.
      self.flag_begin = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9dB().pack(_x.x, _x.dx, _x.ddx, _x.y, _x.dy, _x.ddy, _x.z, _x.dz, _x.ddz, _x.flag_begin))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 73
      (_x.x, _x.dx, _x.ddx, _x.y, _x.dy, _x.ddy, _x.z, _x.dz, _x.ddz, _x.flag_begin,) = _get_struct_9dB().unpack(str[start:end])
      self.flag_begin = bool(self.flag_begin)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9dB().pack(_x.x, _x.dx, _x.ddx, _x.y, _x.dy, _x.ddy, _x.z, _x.dz, _x.ddz, _x.flag_begin))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 73
      (_x.x, _x.dx, _x.ddx, _x.y, _x.dy, _x.ddy, _x.z, _x.dz, _x.ddz, _x.flag_begin,) = _get_struct_9dB().unpack(str[start:end])
      self.flag_begin = bool(self.flag_begin)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9dB = None
def _get_struct_9dB():
    global _struct_9dB
    if _struct_9dB is None:
        _struct_9dB = struct.Struct("<9dB")
    return _struct_9dB
class traj_out_msg(object):
  _type          = 'task_plan/traj_out_msg'
  _md5sum = 'd5e5f46daf7567dab08610da48ae237e'
  _request_class  = traj_out_msgRequest
  _response_class = traj_out_msgResponse
