// Generated by gencpp from file clik/manipulator_mode.msg
// DO NOT EDIT!


#ifndef CLIK_MESSAGE_MANIPULATOR_MODE_H
#define CLIK_MESSAGE_MANIPULATOR_MODE_H

#include <ros/service_traits.h>


#include <clik/manipulator_modeRequest.h>
#include <clik/manipulator_modeResponse.h>


namespace clik
{

struct manipulator_mode
{

typedef manipulator_modeRequest Request;
typedef manipulator_modeResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct manipulator_mode
} // namespace clik


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::clik::manipulator_mode > {
  static const char* value()
  {
    return "824ed9c4ea0b3e2aae8eb76e8fc86e2c";
  }

  static const char* value(const ::clik::manipulator_mode&) { return value(); }
};

template<>
struct DataType< ::clik::manipulator_mode > {
  static const char* value()
  {
    return "clik/manipulator_mode";
  }

  static const char* value(const ::clik::manipulator_mode&) { return value(); }
};


// service_traits::MD5Sum< ::clik::manipulator_modeRequest> should match
// service_traits::MD5Sum< ::clik::manipulator_mode >
template<>
struct MD5Sum< ::clik::manipulator_modeRequest>
{
  static const char* value()
  {
    return MD5Sum< ::clik::manipulator_mode >::value();
  }
  static const char* value(const ::clik::manipulator_modeRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::clik::manipulator_modeRequest> should match
// service_traits::DataType< ::clik::manipulator_mode >
template<>
struct DataType< ::clik::manipulator_modeRequest>
{
  static const char* value()
  {
    return DataType< ::clik::manipulator_mode >::value();
  }
  static const char* value(const ::clik::manipulator_modeRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::clik::manipulator_modeResponse> should match
// service_traits::MD5Sum< ::clik::manipulator_mode >
template<>
struct MD5Sum< ::clik::manipulator_modeResponse>
{
  static const char* value()
  {
    return MD5Sum< ::clik::manipulator_mode >::value();
  }
  static const char* value(const ::clik::manipulator_modeResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::clik::manipulator_modeResponse> should match
// service_traits::DataType< ::clik::manipulator_mode >
template<>
struct DataType< ::clik::manipulator_modeResponse>
{
  static const char* value()
  {
    return DataType< ::clik::manipulator_mode >::value();
  }
  static const char* value(const ::clik::manipulator_modeResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // CLIK_MESSAGE_MANIPULATOR_MODE_H
