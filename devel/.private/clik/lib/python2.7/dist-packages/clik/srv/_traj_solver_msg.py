# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from clik/traj_solver_msgRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class traj_solver_msgRequest(genpy.Message):
  _md5sum = "d2d10619491418a33c3811389a801280"
  _type = "clik/traj_solver_msgRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 s_scale  
float64 x_upperPosition 
float64 x_lowerPosition 
float64 x_upperVelocity
float64 x_lowerVelocity
float64 x_upperAccelera
float64 x_lowerAccelera
float64 x_0
float64 x_n
float64 x_v0
float64 x_vn
float64 y_upperPosition 
float64 y_lowerPosition 
float64 y_upperVelocity
float64 y_lowerVelocity
float64 y_upperAccelera
float64 y_lowerAccelera
float64 y_0
float64 y_n
float64 y_v0
float64 y_vn
float64 z_upperPosition 
float64 z_lowerPosition 
float64 z_upperVelocity
float64 z_lowerVelocity
float64 z_upperAccelera
float64 z_lowerAccelera
float64 z_0
float64 z_n
float64 z_v0
float64 z_vn
"""
  __slots__ = ['s_scale','x_upperPosition','x_lowerPosition','x_upperVelocity','x_lowerVelocity','x_upperAccelera','x_lowerAccelera','x_0','x_n','x_v0','x_vn','y_upperPosition','y_lowerPosition','y_upperVelocity','y_lowerVelocity','y_upperAccelera','y_lowerAccelera','y_0','y_n','y_v0','y_vn','z_upperPosition','z_lowerPosition','z_upperVelocity','z_lowerVelocity','z_upperAccelera','z_lowerAccelera','z_0','z_n','z_v0','z_vn']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       s_scale,x_upperPosition,x_lowerPosition,x_upperVelocity,x_lowerVelocity,x_upperAccelera,x_lowerAccelera,x_0,x_n,x_v0,x_vn,y_upperPosition,y_lowerPosition,y_upperVelocity,y_lowerVelocity,y_upperAccelera,y_lowerAccelera,y_0,y_n,y_v0,y_vn,z_upperPosition,z_lowerPosition,z_upperVelocity,z_lowerVelocity,z_upperAccelera,z_lowerAccelera,z_0,z_n,z_v0,z_vn

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(traj_solver_msgRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.s_scale is None:
        self.s_scale = 0.
      if self.x_upperPosition is None:
        self.x_upperPosition = 0.
      if self.x_lowerPosition is None:
        self.x_lowerPosition = 0.
      if self.x_upperVelocity is None:
        self.x_upperVelocity = 0.
      if self.x_lowerVelocity is None:
        self.x_lowerVelocity = 0.
      if self.x_upperAccelera is None:
        self.x_upperAccelera = 0.
      if self.x_lowerAccelera is None:
        self.x_lowerAccelera = 0.
      if self.x_0 is None:
        self.x_0 = 0.
      if self.x_n is None:
        self.x_n = 0.
      if self.x_v0 is None:
        self.x_v0 = 0.
      if self.x_vn is None:
        self.x_vn = 0.
      if self.y_upperPosition is None:
        self.y_upperPosition = 0.
      if self.y_lowerPosition is None:
        self.y_lowerPosition = 0.
      if self.y_upperVelocity is None:
        self.y_upperVelocity = 0.
      if self.y_lowerVelocity is None:
        self.y_lowerVelocity = 0.
      if self.y_upperAccelera is None:
        self.y_upperAccelera = 0.
      if self.y_lowerAccelera is None:
        self.y_lowerAccelera = 0.
      if self.y_0 is None:
        self.y_0 = 0.
      if self.y_n is None:
        self.y_n = 0.
      if self.y_v0 is None:
        self.y_v0 = 0.
      if self.y_vn is None:
        self.y_vn = 0.
      if self.z_upperPosition is None:
        self.z_upperPosition = 0.
      if self.z_lowerPosition is None:
        self.z_lowerPosition = 0.
      if self.z_upperVelocity is None:
        self.z_upperVelocity = 0.
      if self.z_lowerVelocity is None:
        self.z_lowerVelocity = 0.
      if self.z_upperAccelera is None:
        self.z_upperAccelera = 0.
      if self.z_lowerAccelera is None:
        self.z_lowerAccelera = 0.
      if self.z_0 is None:
        self.z_0 = 0.
      if self.z_n is None:
        self.z_n = 0.
      if self.z_v0 is None:
        self.z_v0 = 0.
      if self.z_vn is None:
        self.z_vn = 0.
    else:
      self.s_scale = 0.
      self.x_upperPosition = 0.
      self.x_lowerPosition = 0.
      self.x_upperVelocity = 0.
      self.x_lowerVelocity = 0.
      self.x_upperAccelera = 0.
      self.x_lowerAccelera = 0.
      self.x_0 = 0.
      self.x_n = 0.
      self.x_v0 = 0.
      self.x_vn = 0.
      self.y_upperPosition = 0.
      self.y_lowerPosition = 0.
      self.y_upperVelocity = 0.
      self.y_lowerVelocity = 0.
      self.y_upperAccelera = 0.
      self.y_lowerAccelera = 0.
      self.y_0 = 0.
      self.y_n = 0.
      self.y_v0 = 0.
      self.y_vn = 0.
      self.z_upperPosition = 0.
      self.z_lowerPosition = 0.
      self.z_upperVelocity = 0.
      self.z_lowerVelocity = 0.
      self.z_upperAccelera = 0.
      self.z_lowerAccelera = 0.
      self.z_0 = 0.
      self.z_n = 0.
      self.z_v0 = 0.
      self.z_vn = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_31d().pack(_x.s_scale, _x.x_upperPosition, _x.x_lowerPosition, _x.x_upperVelocity, _x.x_lowerVelocity, _x.x_upperAccelera, _x.x_lowerAccelera, _x.x_0, _x.x_n, _x.x_v0, _x.x_vn, _x.y_upperPosition, _x.y_lowerPosition, _x.y_upperVelocity, _x.y_lowerVelocity, _x.y_upperAccelera, _x.y_lowerAccelera, _x.y_0, _x.y_n, _x.y_v0, _x.y_vn, _x.z_upperPosition, _x.z_lowerPosition, _x.z_upperVelocity, _x.z_lowerVelocity, _x.z_upperAccelera, _x.z_lowerAccelera, _x.z_0, _x.z_n, _x.z_v0, _x.z_vn))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 248
      (_x.s_scale, _x.x_upperPosition, _x.x_lowerPosition, _x.x_upperVelocity, _x.x_lowerVelocity, _x.x_upperAccelera, _x.x_lowerAccelera, _x.x_0, _x.x_n, _x.x_v0, _x.x_vn, _x.y_upperPosition, _x.y_lowerPosition, _x.y_upperVelocity, _x.y_lowerVelocity, _x.y_upperAccelera, _x.y_lowerAccelera, _x.y_0, _x.y_n, _x.y_v0, _x.y_vn, _x.z_upperPosition, _x.z_lowerPosition, _x.z_upperVelocity, _x.z_lowerVelocity, _x.z_upperAccelera, _x.z_lowerAccelera, _x.z_0, _x.z_n, _x.z_v0, _x.z_vn,) = _get_struct_31d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_31d().pack(_x.s_scale, _x.x_upperPosition, _x.x_lowerPosition, _x.x_upperVelocity, _x.x_lowerVelocity, _x.x_upperAccelera, _x.x_lowerAccelera, _x.x_0, _x.x_n, _x.x_v0, _x.x_vn, _x.y_upperPosition, _x.y_lowerPosition, _x.y_upperVelocity, _x.y_lowerVelocity, _x.y_upperAccelera, _x.y_lowerAccelera, _x.y_0, _x.y_n, _x.y_v0, _x.y_vn, _x.z_upperPosition, _x.z_lowerPosition, _x.z_upperVelocity, _x.z_lowerVelocity, _x.z_upperAccelera, _x.z_lowerAccelera, _x.z_0, _x.z_n, _x.z_v0, _x.z_vn))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 248
      (_x.s_scale, _x.x_upperPosition, _x.x_lowerPosition, _x.x_upperVelocity, _x.x_lowerVelocity, _x.x_upperAccelera, _x.x_lowerAccelera, _x.x_0, _x.x_n, _x.x_v0, _x.x_vn, _x.y_upperPosition, _x.y_lowerPosition, _x.y_upperVelocity, _x.y_lowerVelocity, _x.y_upperAccelera, _x.y_lowerAccelera, _x.y_0, _x.y_n, _x.y_v0, _x.y_vn, _x.z_upperPosition, _x.z_lowerPosition, _x.z_upperVelocity, _x.z_lowerVelocity, _x.z_upperAccelera, _x.z_lowerAccelera, _x.z_0, _x.z_n, _x.z_v0, _x.z_vn,) = _get_struct_31d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_31d = None
def _get_struct_31d():
    global _struct_31d
    if _struct_31d is None:
        _struct_31d = struct.Struct("<31d")
    return _struct_31d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from clik/traj_solver_msgResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class traj_solver_msgResponse(genpy.Message):
  _md5sum = "02a1365fbb049f415398ed38aa76782f"
  _type = "clik/traj_solver_msgResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool resultstatus
"""
  __slots__ = ['resultstatus']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       resultstatus

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(traj_solver_msgResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.resultstatus is None:
        self.resultstatus = False
    else:
      self.resultstatus = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.resultstatus
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.resultstatus,) = _get_struct_B().unpack(str[start:end])
      self.resultstatus = bool(self.resultstatus)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.resultstatus
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.resultstatus,) = _get_struct_B().unpack(str[start:end])
      self.resultstatus = bool(self.resultstatus)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class traj_solver_msg(object):
  _type          = 'clik/traj_solver_msg'
  _md5sum = '38d31568563b236264303ee6e91f80dd'
  _request_class  = traj_solver_msgRequest
  _response_class = traj_solver_msgResponse
