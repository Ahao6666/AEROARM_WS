// Generated by gencpp from file calibration/position_pub.msg
// DO NOT EDIT!


#ifndef CALIBRATION_MESSAGE_POSITION_PUB_H
#define CALIBRATION_MESSAGE_POSITION_PUB_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace calibration
{
template <class ContainerAllocator>
struct position_pub_
{
  typedef position_pub_<ContainerAllocator> Type;

  position_pub_()
    : time_stamp()
    , X(0.0)
    , Y(0.0)
    , Z(0.0)  {
    }
  position_pub_(const ContainerAllocator& _alloc)
    : time_stamp()
    , X(0.0)
    , Y(0.0)
    , Z(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef float _X_type;
  _X_type X;

   typedef float _Y_type;
  _Y_type Y;

   typedef float _Z_type;
  _Z_type Z;





  typedef boost::shared_ptr< ::calibration::position_pub_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::calibration::position_pub_<ContainerAllocator> const> ConstPtr;

}; // struct position_pub_

typedef ::calibration::position_pub_<std::allocator<void> > position_pub;

typedef boost::shared_ptr< ::calibration::position_pub > position_pubPtr;
typedef boost::shared_ptr< ::calibration::position_pub const> position_pubConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::calibration::position_pub_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::calibration::position_pub_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::calibration::position_pub_<ContainerAllocator1> & lhs, const ::calibration::position_pub_<ContainerAllocator2> & rhs)
{
  return lhs.time_stamp == rhs.time_stamp &&
    lhs.X == rhs.X &&
    lhs.Y == rhs.Y &&
    lhs.Z == rhs.Z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::calibration::position_pub_<ContainerAllocator1> & lhs, const ::calibration::position_pub_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace calibration

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::calibration::position_pub_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::calibration::position_pub_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calibration::position_pub_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calibration::position_pub_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration::position_pub_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration::position_pub_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::calibration::position_pub_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9499d283948dec08036e4b38b8bbe0a9";
  }

  static const char* value(const ::calibration::position_pub_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9499d283948dec08ULL;
  static const uint64_t static_value2 = 0x036e4b38b8bbe0a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::calibration::position_pub_<ContainerAllocator> >
{
  static const char* value()
  {
    return "calibration/position_pub";
  }

  static const char* value(const ::calibration::position_pub_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::calibration::position_pub_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time time_stamp\n"
"float32 X\n"
"float32 Y\n"
"float32 Z\n"
"\n"
;
  }

  static const char* value(const ::calibration::position_pub_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::calibration::position_pub_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_stamp);
      stream.next(m.X);
      stream.next(m.Y);
      stream.next(m.Z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct position_pub_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::calibration::position_pub_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::calibration::position_pub_<ContainerAllocator>& v)
  {
    s << indent << "time_stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "X: ";
    Printer<float>::stream(s, indent + "  ", v.X);
    s << indent << "Y: ";
    Printer<float>::stream(s, indent + "  ", v.Y);
    s << indent << "Z: ";
    Printer<float>::stream(s, indent + "  ", v.Z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CALIBRATION_MESSAGE_POSITION_PUB_H
