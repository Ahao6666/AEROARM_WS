// Generated by gencpp from file navigator/action.msg
// DO NOT EDIT!


#ifndef NAVIGATOR_MESSAGE_ACTION_H
#define NAVIGATOR_MESSAGE_ACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace navigator
{
template <class ContainerAllocator>
struct action_
{
  typedef action_<ContainerAllocator> Type;

  action_()
    : header()
    , uav_id(0)
    , behavior(0)
    , behaviormode(0)
    , onlineflag(false)
    , params()  {
    }
  action_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , uav_id(0)
    , behavior(0)
    , behaviormode(0)
    , onlineflag(false)
    , params(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _uav_id_type;
  _uav_id_type uav_id;

   typedef uint8_t _behavior_type;
  _behavior_type behavior;

   typedef uint8_t _behaviormode_type;
  _behaviormode_type behaviormode;

   typedef uint8_t _onlineflag_type;
  _onlineflag_type onlineflag;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _params_type;
  _params_type params;





  typedef boost::shared_ptr< ::navigator::action_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navigator::action_<ContainerAllocator> const> ConstPtr;

}; // struct action_

typedef ::navigator::action_<std::allocator<void> > action;

typedef boost::shared_ptr< ::navigator::action > actionPtr;
typedef boost::shared_ptr< ::navigator::action const> actionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navigator::action_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navigator::action_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::navigator::action_<ContainerAllocator1> & lhs, const ::navigator::action_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.uav_id == rhs.uav_id &&
    lhs.behavior == rhs.behavior &&
    lhs.behaviormode == rhs.behaviormode &&
    lhs.onlineflag == rhs.onlineflag &&
    lhs.params == rhs.params;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::navigator::action_<ContainerAllocator1> & lhs, const ::navigator::action_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace navigator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::navigator::action_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigator::action_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigator::action_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigator::action_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigator::action_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigator::action_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navigator::action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d74a309e044f35fbb75377947c88949e";
  }

  static const char* value(const ::navigator::action_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd74a309e044f35fbULL;
  static const uint64_t static_value2 = 0xb75377947c88949eULL;
};

template<class ContainerAllocator>
struct DataType< ::navigator::action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navigator/action";
  }

  static const char* value(const ::navigator::action_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navigator::action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int8   uav_id\n"
"uint8  behavior\n"
"uint8  behaviormode\n"
"bool   onlineflag\n"
"float64[] params\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::navigator::action_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navigator::action_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.uav_id);
      stream.next(m.behavior);
      stream.next(m.behaviormode);
      stream.next(m.onlineflag);
      stream.next(m.params);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct action_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navigator::action_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navigator::action_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "uav_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.uav_id);
    s << indent << "behavior: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.behavior);
    s << indent << "behaviormode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.behaviormode);
    s << indent << "onlineflag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.onlineflag);
    s << indent << "params[]" << std::endl;
    for (size_t i = 0; i < v.params.size(); ++i)
    {
      s << indent << "  params[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.params[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVIGATOR_MESSAGE_ACTION_H
